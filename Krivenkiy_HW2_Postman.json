{
	"info": {
		"_postman_id": "f602db02-0a56-4b66-80e7-9337721d752d",
		"name": "Postman_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код = 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Верный стринг\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"pm.expect(jsonData.name).to.eql(\"Aleks\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"pm.expect(jsonData.age).to.eql(\"33\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(1500);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let reqP = request.data;\r",
							"console.log(\"Name from request = \" +reqP.name +\", Тип данных = \" +typeof (reqP.name)); \r",
							"console.log(\"Age from request = \" +reqP.age +\", Тип данных = \" +typeof (reqP.age));\r",
							"console.log(\"Salary from request = \" +reqP.salary +\", Тип данных = \" +typeof (reqP.salary));\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response = Name from request\", function () {\r",
							"pm.expect(jsonData.name).to.eql(reqP.name);\r",
							"});\r",
							"\r",
							"// 9. Test 9 Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from response = Age from request\", function () {\r",
							"pm.expect(jsonData.age).to.eql(reqP.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var testSalary = +reqP.salary;    // reqP.salary имеет тип данных \"строка\", а jsonData.salary это\"число\". Поэтому перевожу reqP.salary в число\r",
							"console.log(\"testSalary = \" +testSalary)\r",
							"pm.test(\"Salary from response = Salary from request\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(testSalary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log (jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var Sal4 = testSalary*4\r",
							"console.log(\"testSalary = \" +testSalary)\r",
							"console.log(\"Sal4 = \" +Sal4)\r",
							"console.log(\"u_salary_1_5_year = \" +jsonData.family.u_salary_1_5_year)\r",
							"pm.test(\"u_salary_1_5_year from response = Salary from request\", function () {\r",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(Sal4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Aleks",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}//user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"console.log(\"Name from request = \" +req.name +\", Тип данных = \" +typeof (req.name)); \r",
							"console.log(\"Age from request = \" +req.age +\", Тип данных = \" +typeof (req.age));\r",
							"console.log(\"Salary from request = \" +req.salary +\", Тип данных = \" +typeof (req.salary));\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response = Name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from response = Age from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"    });\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var digitalSalary = +req.salary    // req.salary имеет тип данных строка, а jsonData.salary - число. Поэтому перевожу req.salary в число\r",
							"pm.test(\"Salary from response = Salary from request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(digitalSalary);\r",
							"    });\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have name\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							" });\r",
							"\r",
							" // 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							" });\r",
							"\r",
							" // 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name = Luky\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.have.eql(\"Luky\")\r",
							" });\r",
							"\r",
							" // 12. Проверить, что параметр age имеет значение 4.\r",
							" pm.test(\"Dog age = 4\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.have.eql(4)\r",
							" });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Aleksandr&age=32&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Aleksandr"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var Req = pm.request.url.query.toObject();\r",
							"console.log(\"Name from request = \" +Req.name +\", Тип данных = \" +typeof (Req.name)); \r",
							"console.log(\"Age from request = \" +Req.age +\", Тип данных = \" +typeof (Req.age));\r",
							"console.log(\"Salary from request = \" +Req.salary +\", Тип данных = \" +typeof (Req.salary));\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response = Name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(Req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var dot = +Req.age;    // Req.age имеет тип данных строка, а jsonData.age - число. Поэтому перевожу Req.age в число\r",
							"console.log( \"Dot = \" +dot);\r",
							"pm.test(\"Age from response = Age from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(dot);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary from request = \" +Req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary from response = \" +jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"Salary[0] from response = \" +jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary[1] from response = \" +jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary[2] from response = \" +jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var dotS = +Req.salary;    // Req.salary имеет тип данных строка, а jsonData.salary - число. Поэтому перевожу Req.salary в число\r",
							"console.log(\"dotS = \" +dotS);\r",
							"pm.test(\"Salary[0] from response = Salary from request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(dotS);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var Salary2 = String(dotS*2);\r",
							"console.log(\"Salary2 = \" +Salary2)\r",
							"pm.test(\"Salary[1] from response = salary *2 from request\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(Salary2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var Salary3 = String(dotS*3);\r",
							"console.log(\"Salary3 = \" +Salary3)\r",
							"pm.test(\"Salary[2] from response = salary *3 from request\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(Salary3);\r",
							"    });\r",
							"\r",
							"// 15. Создать в окружении переменную name \r",
							"pm.environment.set(\"name\", Req.name);\r",
							"\r",
							"// 16. Создать в окружении переменную age \r",
							"pm.environment.set(\"age\", Req.age );\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", Req.salary);\r",
							"\r",
							"// 18, 19, 20. Передать в окружение данные данные name, age, salary. \r",
							"// Ответ - Сделать запрос. данные внесутся в зависимости от введенных в параметры данных\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var Title = jsonData.salary;\r",
							"for (i = 0; i < Title.length; i++){\r",
							"    console.log(jsonData.salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Alex&age=31&salary=901",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "901"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request \r",
							"//    Сделано - в поле Body/form-data добавлен параметр \"salary\" со значением {{salary}};\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"//    Сделано - в поле Body/form-data добавлен параметр \"age\"со значением {{age}};\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"//    Сделано - в поле Body/form-data добавлен параметр \"name\"со значением {{name}};\r",
							"\r",
							"// 4. Отправить запрос - Сделано\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response have property start_qa_salary\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response have property qa_salary_after_6_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response have property qa_salary_after_12_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year \r",
							"pm.test(\"json response have property qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response have property qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response have property person\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary from response = salary from request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request\r",
							"pm.test(\"qa_salary_after_6_months from response = salary*2 from request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary * 2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months from response = salary*2.7 from request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary * 2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year from response = salary*3.3 from request\", function () {\r",
							"pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years from response = salary*3.8 from request\", function () {\r",
							"pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] from response = salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age from response = age from request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years from response = salary*4.2 from request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary * 4.2);\r",
							"});\r",
							"\r",
							"// 22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var prop in jsonData.person) {\r",
							"console.log(prop + \": \" + jsonData.person[prop]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}